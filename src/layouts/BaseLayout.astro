---
import NavBarWrapper from '../components/NavBarWrapper.jsx';
import { LanguageProvider } from '../context/LanguageContext.jsx';
import { getLangFromRequest } from '../utils/lang.js';
import {
  FAVICON_PATH,
  STYLE_PATHS,
  VIEWPORT_ZOOM_ALLOWED,
  PERSON_SCHEMA,
  SITE_BASE_URL,
  SITE_DOMAIN,
  SITE_NAME_EN,
  DEFAULT_SOCIAL_IMAGE,
  OG_IMAGE_DIMENSIONS,
  GEO_REGION,
  GEO_PLACENAME_EN,
  GEO_POSITION,
  GEO_ICBM,
  TWITTER_HANDLE
} from '../config.js';

const initialLang = getLangFromRequest(Astro);

const {
  lang = 'zh',
  title = '',
  description = '',
  viewport = VIEWPORT_ZOOM_ALLOWED,
  canonical = '',
  personSchemaJson = JSON.stringify(PERSON_SCHEMA),
  extraStyles = [],
  preloadStyles = [],
  extraScripts = [],
  showNav = true,
  showFooter = false,
  bodyClass = '',
  mainClass = 'main-content',
  bodyAttrs = {},
  mainAttrs = {},
  og = {},
  twitter = {},
  includeGeo = true,
  metaRobots = 'index, follow',
  metaLanguage = '',
  metaAuthor = ''
} = Astro.props;

const jsonLD = personSchemaJson;
const ogDefaults = {
  title,
  description,
  url: canonical,
  type: 'website',
  image: `${SITE_BASE_URL}${DEFAULT_SOCIAL_IMAGE}`,
  site_name: SITE_NAME_EN,
  imageWidth: OG_IMAGE_DIMENSIONS.WIDTH,
  imageHeight: OG_IMAGE_DIMENSIONS.HEIGHT,
  imageAlt: '',
  imageType: 'image/jpeg',
  secureImageUrl: `${SITE_BASE_URL}${DEFAULT_SOCIAL_IMAGE}`
};
const twitterDefaults = {
  card: 'summary_large_image',
  title,
  description,
  image: ogDefaults.image,
  imageAlt: '',
  site: TWITTER_HANDLE,
  creator: TWITTER_HANDLE,
  url: canonical,
  domain: SITE_DOMAIN
};
const ogProps = { ...ogDefaults, ...og };
const twitterProps = { ...twitterDefaults, ...twitter };
---

<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content={viewport} />
    {title && <title>{title}</title>}
    {description && <meta name="description" content={description} />}
    <link rel="shortcut icon" type="image/x-icon" href={FAVICON_PATH} />
    <link rel="icon" type="image/png" href={FAVICON_PATH} />
    <link rel="apple-touch-icon" href={FAVICON_PATH} />
    <script is:inline>
      (function () {
        try {
          // 1. 尝试读取本地存储
          const storedTheme = localStorage.getItem('preferred_theme');
          // 2. 如果无存储值，检测系统偏好
          const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
          // 3. 决策逻辑
          const shouldUseDarkMode = storedTheme === 'dark' || (!storedTheme && systemPrefersDark);
          // 4. 立即应用主题
          if (shouldUseDarkMode) {
            document.documentElement.classList.add('dark-mode');
          }
          // 5. 设置数据属性供React使用
          document.documentElement.dataset.initialTheme =
            storedTheme || (systemPrefersDark ? 'dark' : 'light');
        } catch (e) {
          console.error('主题初始化失败', e);
        }
      })();
    </script>
    <script is:inline>
      (function () {
        try {
          // 语言初始化逻辑
          const storedLang = localStorage.getItem('preferred_lang');
          const attrLang = document.documentElement.getAttribute('lang');
          const lang = storedLang || attrLang || 'zh-CN';
          document.documentElement.lang = lang;
          document.documentElement.dataset.initialLang = lang;

          // 添加监听器保持脚本与React组件同步
          window.addEventListener('langChanged', (e) => {
            try {
              localStorage.setItem('preferred_lang', e.detail);
              document.documentElement.lang = e.detail;
            } catch (error) {
              console.error('语言同步失败', error);
            }
          });
        } catch (e) {
          console.error('语言初始化失败', e);
        }
      })();
    </script>
    <!-- Load Bootstrap first so custom styles can override -->
    <link rel="stylesheet" href={STYLE_PATHS.BOOTSTRAP} />
    <link rel="stylesheet" href={STYLE_PATHS.THEME} />
    <link rel="canonical" href={canonical} />
    {metaRobots && <meta name="robots" content={metaRobots} />}
    {metaAuthor && <meta name="author" content={metaAuthor} />}
    <meta name="language" content={metaLanguage || lang} />
    {
      includeGeo && (
        <Fragment>
          <meta name="geo.region" content={GEO_REGION} />
          <meta name="geo.placename" content={GEO_PLACENAME_EN} />
          <meta name="geo.position" content={GEO_POSITION} />
          <meta name="ICBM" content={GEO_ICBM} />
        </Fragment>
      )
    }
    {ogProps.title && <meta property="og:title" content={ogProps.title} />}
    {ogProps.description && <meta property="og:description" content={ogProps.description} />}
    {ogProps.type && <meta property="og:type" content={ogProps.type} />}
    {ogProps.url && <meta property="og:url" content={ogProps.url} />}
    {ogProps.image && <meta property="og:image" content={ogProps.image} />}
    {ogProps.site_name && <meta property="og:site_name" content={ogProps.site_name} />}
    {ogProps.imageWidth && <meta property="og:image:width" content={ogProps.imageWidth} />}
    {ogProps.imageHeight && <meta property="og:image:height" content={ogProps.imageHeight} />}
    {ogProps.imageAlt && <meta property="og:image:alt" content={ogProps.imageAlt} />}
    {ogProps.imageType && <meta property="og:image:type" content={ogProps.imageType} />}
    {
      ogProps.secureImageUrl && (
        <meta property="og:image:secure_url" content={ogProps.secureImageUrl} />
      )
    }
    {twitterProps.card && <meta name="twitter:card" content={twitterProps.card} />}
    {twitterProps.title && <meta name="twitter:title" content={twitterProps.title} />}
    {
      twitterProps.description && (
        <meta name="twitter:description" content={twitterProps.description} />
      )
    }
    {twitterProps.image && <meta name="twitter:image" content={twitterProps.image} />}
    {twitterProps.imageAlt && <meta name="twitter:image:alt" content={twitterProps.imageAlt} />}
    {twitterProps.site && <meta name="twitter:site" content={twitterProps.site} />}
    {twitterProps.creator && <meta name="twitter:creator" content={twitterProps.creator} />}
    {twitterProps.url && <meta name="twitter:url" content={twitterProps.url} />}
    {twitterProps.domain && <meta name="twitter:domain" content={twitterProps.domain} />}
    <script type="application/ld+json" set:html={jsonLD} />
    {
      preloadStyles.map((href: string | URL | null | undefined) => (
        <link rel="preload" href={href} as="style" />
      ))
    }
    {
      extraStyles.map((href: string | URL | null | undefined) => (
        <link rel="stylesheet" href={href} />
      ))
    }
    <slot name="head" />
  </head>
  <body class={bodyClass} {...bodyAttrs}>
    {
      showNav ? (
        <slot name="nav">
          <NavBarWrapper client:load initialLang={initialLang} />
        </slot>
      ) : null
    }
    <main class={mainClass} {...mainAttrs}>
      <!-- 页面主体内容插槽 -->
      <slot />
    </main>
    <slot name="bodyEnd" />
    {showFooter && <slot name="footer" />}
    {extraScripts.map((src: string | null | undefined) => <script defer src={src} />)}
  </body>
</html>
