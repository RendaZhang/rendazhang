---
import { NavBarWrapper } from '../components/layouts';
import { ChatWidget } from '../components/chat';
import {
  FAVICON_PATHS,
  VIEWPORT_ZOOM_ALLOWED,
  PERSON_SCHEMA,
  SITE_BASE_URL,
  SITE_DOMAIN,
  SITE_NAME_EN,
  DEFAULT_SOCIAL_IMAGE,
  OG_IMAGE_DIMENSIONS,
  GEO_REGION,
  GEO_PLACENAME_EN,
  GEO_POSITION,
  GEO_ICBM,
  TWITTER_HANDLE,
  LANG_STORAGE_KEY,
  THEME_STORAGE_KEY,
  STYLE_PATHS
} from '../constants';
import { isProduction } from '../utils/env';
import '../styles/theme.css';

interface OpenGraphProps {
  title?: string;
  description?: string;
  url?: string;
  type?: string;
  image?: string;
  site_name?: string;
  imageWidth?: string;
  imageHeight?: string;
  imageAlt?: string;
  imageType?: string;
  secureImageUrl?: string;
}

interface TwitterCardProps {
  card?: string;
  title?: string;
  description?: string;
  image?: string;
  imageAlt?: string;
  site?: string;
  creator?: string;
  url?: string;
  domain?: string;
}

export interface BaseLayoutProps {
  lang?: string;
  title?: string;
  titleZh?: string;
  titleEn?: string;
  description?: string;
  viewport?: string;
  canonical?: string;
  personSchemaJson?: string;
  extraStyles?: Array<string | URL>;
  preloadStyles?: Array<string | URL>;
  extraScripts?: string[];
  showNav?: boolean;
  showFooter?: boolean;
  showChatWidget?: boolean;
  bodyClass?: string;
  mainClass?: string;
  bodyAttrs?: Record<string, unknown>;
  mainAttrs?: Record<string, unknown>;
  og?: OpenGraphProps;
  twitter?: TwitterCardProps;
  includeGeo?: boolean;
  metaRobots?: string;
  metaLanguage?: string;
  metaAuthor?: string;
}

const {
  lang: langProp,
  title = '',
  titleZh = '',
  titleEn = '',
  description = '',
  viewport = VIEWPORT_ZOOM_ALLOWED,
  canonical = '',
  personSchemaJson = JSON.stringify(PERSON_SCHEMA),
  extraStyles = [],
  preloadStyles = [],
  extraScripts = [],
  showNav = true,
  showFooter = false,
  showChatWidget = true,
  bodyClass = '',
  mainClass = 'main-content',
  bodyAttrs = {},
  mainAttrs = {},
  og = {},
  twitter = {},
  includeGeo = true,
  metaRobots = 'index, follow',
  metaLanguage = '',
  metaAuthor = ''
}: BaseLayoutProps = Astro.props;

if (showChatWidget) {
  preloadStyles.push(STYLE_PATHS.CHAT_WIDGET);
  extraStyles.push(STYLE_PATHS.CHAT_WIDGET);
}

const lang = langProp || 'zh-CN';
const initialLang = lang;
const effectiveTitleZh = titleZh || title;
const effectiveTitleEn = titleEn || title;
const initialTitle = initialLang.startsWith('zh') ? effectiveTitleZh : effectiveTitleEn;

const IS_PROD = isProduction();
const jsonLD = personSchemaJson;
const ogDefaults = {
  title,
  description,
  url: canonical,
  type: 'website',
  image: `${SITE_BASE_URL}${DEFAULT_SOCIAL_IMAGE}`,
  site_name: SITE_NAME_EN,
  imageWidth: OG_IMAGE_DIMENSIONS.WIDTH,
  imageHeight: OG_IMAGE_DIMENSIONS.HEIGHT,
  imageAlt: '',
  imageType: 'image/jpeg',
  secureImageUrl: `${SITE_BASE_URL}${DEFAULT_SOCIAL_IMAGE}`
};
const twitterDefaults = {
  card: 'summary_large_image',
  title,
  description,
  image: ogDefaults.image,
  imageAlt: '',
  site: TWITTER_HANDLE,
  creator: TWITTER_HANDLE,
  url: canonical,
  domain: SITE_DOMAIN
};
const ogProps = { ...ogDefaults, ...og };
const twitterProps = { ...twitterDefaults, ...twitter };
---

<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content={viewport} />
    {initialTitle && <title>{initialTitle}</title>}
    {description && <meta name="description" content={description} />}
    <link rel="shortcut icon" type="image/x-icon" href={FAVICON_PATHS.ICO} />
    <link rel="icon" type="image/png" href={FAVICON_PATHS.PNG} />
    <link rel="apple-touch-icon" href={FAVICON_PATHS.SMALL} />
    <script
      is:inline
      define:vars={{
        themeKey: THEME_STORAGE_KEY,
        langKey: LANG_STORAGE_KEY,
        titleZh: effectiveTitleZh,
        titleEn: effectiveTitleEn,
        isProd: IS_PROD
      }}
    >
      (function () {
        const log = (...args) => {
          if (!isProd) console.log(...args);
        };
        // 挂载全局存储辅助函数
        // 单例检查：确保只初始化一次
        if (window.__storageInitialized) return;
        window.__storageInitialized = true;
        // 轻量级存储助手
        window.__storageHelper = {
          __version: '1.0',
          get(key) {
            try {
              const v = localStorage.getItem(key);
              return v
                ? (() => {
                    try {
                      return JSON.parse(v);
                    } catch {
                      return v;
                    }
                  })()
                : null;
            } catch (e) {
              return null;
            }
          },
          set(key, val) {
            try {
              localStorage.setItem(key, JSON.stringify(val));
            } catch (e) {}
          }
        };

        // 初始化主题
        const initTheme = () => {
          try {
            const storedTheme = window.__storageHelper.get(themeKey);
            // 如果无存储值，检测系统偏好
            const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            const shouldUseDarkMode = storedTheme === 'dark' || (!storedTheme && systemPrefersDark);
            log('BaseLayout inline script storedTheme: ' + storedTheme);
            log('BaseLayout inline script systemPrefersDark: ' + systemPrefersDark);
            log('BaseLayout inline script shouldUseDarkMode: ' + shouldUseDarkMode);
            // 立即应用避免闪烁
            if (shouldUseDarkMode) {
              document.documentElement.classList.add('dark-mode');
            }
            // 设置数据属性供 React 使用
            document.documentElement.dataset.initialTheme =
              storedTheme || (systemPrefersDark ? 'dark' : 'light');
          } catch (e) {
            console.error('BaseLayout inline script: Theme init failed', e);
          }
        };

        // 初始化语言
        const initLang = () => {
          try {
            // 语言初始化逻辑
            const storedLang = window.__storageHelper.get(langKey);
            const docLang = document.documentElement.getAttribute('lang') || 'zh-CN';
            const lang = storedLang || docLang;
            log('BaseLayout inline script storedLang: ' + storedLang);
            log('BaseLayout inline script docLang: ' + docLang);
            log('BaseLayout inline script lang: ' + lang);
            // 立即设置
            document.documentElement.lang = lang;
            // Keep the server-rendered language as the initialLang value so that
            // React hydrates using the same language as the static HTML.
            document.documentElement.dataset.initialLang = docLang;
            // 监听语言变化与 React 组件同步
            window.addEventListener('langChanged', (e) => {
              try {
                window.__storageHelper.set(langKey, e.detail);
                document.documentElement.lang = e.detail;
              } catch (e) {
                console.error('BaseLayout inline script 语言同步失败', e);
              }
            });
          } catch (e) {
            console.error('BaseLayout inline script: Lang init failed', e);
          }
        };

        // 初始化标题
        const initTitle = () => {
          try {
            var zh = titleZh;
            var en = titleEn;
            if (!zh && !en) return;
            function setTitle() {
              var lang = document.documentElement.lang || 'zh-CN';
              if (lang.startsWith('zh') && zh) {
                document.title = zh;
              } else if (!lang.startsWith('zh') && en) {
                document.title = en;
              }
            }
            setTitle();
            window.addEventListener('langChanged', setTitle);
          } catch (e) {
            console.error('BaseLayout inline script: Title init failed', e);
          }
        };

        try {
          initTheme();
          initLang();
          initTitle();
        } catch (e) {
          console.error('Initialization failed', e);
          // 安全回退
          document.documentElement.dataset.initialTheme = 'light';
          document.documentElement.dataset.initialLang = 'zh-CN';
        }
      })();
    </script>
    <link rel="canonical" href={canonical} />
    {metaRobots && <meta name="robots" content={metaRobots} />}
    {metaAuthor && <meta name="author" content={metaAuthor} />}
    <meta name="language" content={metaLanguage || lang} />
    {
      includeGeo && (
        <Fragment>
          <meta name="geo.region" content={GEO_REGION} />
          <meta name="geo.placename" content={GEO_PLACENAME_EN} />
          <meta name="geo.position" content={GEO_POSITION} />
          <meta name="ICBM" content={GEO_ICBM} />
        </Fragment>
      )
    }
    {ogProps.title && <meta property="og:title" content={ogProps.title} />}
    {ogProps.description && <meta property="og:description" content={ogProps.description} />}
    {ogProps.type && <meta property="og:type" content={ogProps.type} />}
    {ogProps.url && <meta property="og:url" content={ogProps.url} />}
    {ogProps.image && <meta property="og:image" content={ogProps.image} />}
    {ogProps.site_name && <meta property="og:site_name" content={ogProps.site_name} />}
    {ogProps.imageWidth && <meta property="og:image:width" content={ogProps.imageWidth} />}
    {ogProps.imageHeight && <meta property="og:image:height" content={ogProps.imageHeight} />}
    {ogProps.imageAlt && <meta property="og:image:alt" content={ogProps.imageAlt} />}
    {ogProps.imageType && <meta property="og:image:type" content={ogProps.imageType} />}
    {
      ogProps.secureImageUrl && (
        <meta property="og:image:secure_url" content={ogProps.secureImageUrl} />
      )
    }
    {twitterProps.card && <meta name="twitter:card" content={twitterProps.card} />}
    {twitterProps.title && <meta name="twitter:title" content={twitterProps.title} />}
    {
      twitterProps.description && (
        <meta name="twitter:description" content={twitterProps.description} />
      )
    }
    {twitterProps.image && <meta name="twitter:image" content={twitterProps.image} />}
    {twitterProps.imageAlt && <meta name="twitter:image:alt" content={twitterProps.imageAlt} />}
    {twitterProps.site && <meta name="twitter:site" content={twitterProps.site} />}
    {twitterProps.creator && <meta name="twitter:creator" content={twitterProps.creator} />}
    {twitterProps.url && <meta name="twitter:url" content={twitterProps.url} />}
    {twitterProps.domain && <meta name="twitter:domain" content={twitterProps.domain} />}
    <script type="application/ld+json" is:inline set:html={jsonLD} />
    {
      preloadStyles
        .filter(Boolean)
        .map((href: string | URL) => <link rel="preload" href={href} as="style" />)
    }
    {extraStyles.filter(Boolean).map((href: string | URL) => <link rel="stylesheet" href={href} />)}
    <slot name="head" />
  </head>
  <body class={bodyClass} {...bodyAttrs}>
    <NavBarWrapper client:load initialLang={initialLang} showNav={showNav}>
      <main class={mainClass} {...mainAttrs}>
        <slot />
      </main>
      {showChatWidget && <ChatWidget client:load />}
      <slot name="bodyEnd" />
      {showFooter && <slot name="footer" />}
    </NavBarWrapper>
    {extraScripts.filter(Boolean).map((src: string) => <script is:inline defer src={src} />)}
  </body>
</html>
