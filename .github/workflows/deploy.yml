name: Build & Deploy Astro Site

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  TAG_NAME: v$(date +%Y.%m.%d) # 定义当天的标签名称

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Generate tag name
        id: tag_name
        run: echo "TAG_NAME=v$(date +%Y.%m.%d)" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci

      - name: Build Astro project
        run: npm run build
        env:
          NODE_ENV: ${{ secrets.NODE_ENV }}
          PUBLIC_API_BASE_URL: ${{ secrets.PUBLIC_API_BASE_URL }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          TAG_NAME: ${{ env.TAG_NAME }}

      - name: Delete existing release branch (if any)
        uses: actions/github-script@v7
        env:
          TAG_NAME: ${{ env.TAG_NAME }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = `release/${process.env.TAG_NAME}`;
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branch}`,
              });
              console.log(`Deleted branch: ${branch}`);
            } catch (error) {
              console.log(`Branch ${branch} does not exist`);
            }

      - name: Publish dist to release branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: release/${{ env.TAG_NAME }}
          force_orphan: true
          commit_message: Release ${{ env.TAG_NAME }}

      - name: Deploy to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'dist/*'
          target: ${{ secrets.DEPLOY_PATH }}
          strip_components: 1
          rm: true

      - name: Create release artifacts
        run: |
          mkdir -p release
          tar -czvf release/build.tar.gz -C dist .
          echo "Build date: $(date)" > release/build-info.txt
          echo "Commit: $GITHUB_SHA" >> release/build-info.txt
          echo "Tag: ${{ env.TAG_NAME }}" >> release/build-info.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/master'
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          body: |
            Production release
            - Build date: $(date)
            - Commit: ${{ github.sha }}
            - Tag: ${{ env.TAG_NAME }}
          files: |
            release/build.tar.gz
            release/build-info.txt
          draft: false
          prerelease: false

      - name: Purge CDN cache
        run: |
          curl -X PURGE ${{ env.SITE_BASE_URL }} || echo "CDN purge failed"
