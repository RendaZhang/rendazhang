document.addEventListener('DOMContentLoaded', function() {
    // 第一步：优先加载和渲染 Markdown 内容
    $.get('README.md', function(data) {
        // 将 Markdown 转换为 HTML 并插入 DOM
        let html = marked.parse(data);

        // 若 README 开头包含 DocToc 生成的目录，则解析目录中的锚点
        let tocMatch = html.match(/<!-- START doctoc[\s\S]*?-->([\s\S]*?)<!-- END doctoc/);
        let anchorIds = [];
        if (tocMatch) {
            const temp = document.createElement('div');
            temp.innerHTML = tocMatch[1];
            anchorIds = Array.from(temp.querySelectorAll('a[href^="#"]')).map(a => a.getAttribute('href').slice(1));
        }

        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        if (anchorIds.length) {
            const headings = doc.querySelectorAll('h1, h2, h3, h4, h5, h6');
            anchorIds.forEach((id, i) => { if (headings[i]) headings[i].id = id; });
        }

        document.getElementById('content').innerHTML = doc.body.innerHTML;
        
        // 第二步：内容渲染完成后，异步加载美化脚本
        const loadScript = (src, callback) => {
            const script = document.createElement('script');
            script.src = src;
            script.onload = callback;
            document.head.appendChild(script);
        };

        // 并行加载高亮和Mermaid
        Promise.all([
            new Promise(resolve => loadScript('/js/highlight.min.js', resolve)),
            new Promise(resolve => loadScript('/js/mermaid.min.js', resolve))
        ]).then(() => {
            // 第三步：所有脚本加载完成后执行美化
            hljs.highlightAll();
            mermaid.initialize({ startOnLoad: false });
            mermaid.init(undefined, document.querySelectorAll('.language-mermaid'));
            console.log('All enhancements applied');
        });
    }).fail(function() {
        document.getElementById('content').innerHTML = '<p>Error loading documentation</p>';
    });
});