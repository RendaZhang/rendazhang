document.addEventListener("DOMContentLoaded", function() {
    const chatInput = document.getElementById("chat-input");
    const chatSendButton = document.getElementById("chat-send-button");
    const chatMessages = document.querySelector(".chat-messages");

    function appendMessage(sender, message) {
        let messageDiv;
    
        // Check if the last message was from the bot and append to it
        if (sender === "bot" && chatMessages.lastChild && chatMessages.lastChild.className === "bot") {
            messageDiv = chatMessages.lastChild;
            animateText(messageDiv, message);
        } else {
            messageDiv = document.createElement("div");
            messageDiv.className = sender;
            messageDiv.innerText = message;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }
    
    function animateText(element, text) {
        return new Promise((resolve) => {
            let currentText = element.innerText;
            let i = 0;
            const interval = setInterval(() => {
                if (i < text.length) {
                    currentText += text[i];
                    element.innerText = currentText;
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                    i++;
                } else {
                    clearInterval(interval);
                    resolve(); // Resolve the promise when animation is done
                }
            }, 50); // Adjust the '50' for faster or slower typing speed
        });
    }    

    chatSendButton.addEventListener("click", function() {
        const userMessage = chatInput.value.trim();
        if (userMessage) {
            appendMessage("user", userMessage);
            chatInput.value = "";

            fetch("/cloudchat/chat", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ message: userMessage })
            }).then(response => {
                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let lastReceived = "";
                let animationPromise = Promise.resolve(); // Initial promise
            
                function processStream() {
                    return reader.read().then(({ value, done }) => {
                        if (done) return;
                        const chunk = decoder.decode(value, { stream: true });
                        const completeResponses = (lastReceived + chunk).split("\n");
                        lastReceived = completeResponses.pop();
            
                        completeResponses.forEach(response => {
                            const message = JSON.parse(response).text;
                            // Chain promises to ensure sequential execution
                            animationPromise = animationPromise.then(() => appendMessage("bot", message));
                        });
            
                        return processStream();
                    });
                }
            
                return processStream();
            }).catch(error => {
                console.error("Error:", error);
                appendMessage("error", "An error occurred while processing your request.");
            });
        }
    });
});
